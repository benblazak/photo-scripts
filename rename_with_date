#! /usr/bin/env python3

# rename the given files
#
# - will not rename files that look like they've already been renamed, or where
#   any part of the path (except for part consisting solely of `.`s) begins with
#   `.`, `-`, or `_`
#
# references
# - use `-api quicktimeutc` for `exiftool`
#   - https://exiftool.org/forum/index.php?topic=10070.0
#   - apparently not all cameras use UTC in quicktime files like the spec says.
#     iphones appear to.
# - https://exiftool.org/TagNames/EXIF.html
#   - CreationDate isn't listed, but the current (2022 jun 8) .mov files for
#     live photos from my iphone xs has it, and it's the only field for those
#     files that has the creation date with an offset (not in utc). this matters
#     when the live photo was taken in a different time zone than the one i'm in
#     when i run this script.

import re
import subprocess
import sys

from datetime import datetime
from pathlib import Path

FORMAT = "%Y%m%d_%H%M%S"


def exiftool(command):
    out = subprocess.run(
        ["exiftool", *command], check=True, capture_output=True, text=True
    )
    if out.stdout:
        return out.stdout.split(":")[1].strip()


def get_date(path):
    path = Path(path)
    if not path.exists():
        print("ERROR:", path, "does not exist", file=sys.stderr)
        return

    dir = path.parent
    base = path.stem
    ext = path.suffix

    xmp = dir / base + ".xmp"
    if (
        not xmp.exists()
        and (match := re.match("IMG_[a-zA-Z]+([0-9]+)", base)) is not None
    ):
        xmp = dir / "IMG_" + match[1] + ".xmp"
    if xmp.exists():
        with open(xmp) as f:
            if match := re.search(r"DateCreated>(.*)</", f.read()):
                return datetime.datetime.fromisoformat(match[1]).strftime(FORMAT)

    if path.lower().endswith(".mov"):
        out = exiftool(["-CreationDate", "-d", FORMAT, path])
        if out:
            return out

    out = exiftool(["-CreateDate", "-d", FORMAT, "-api", "quicktimeutc", path])
    if out:
        return out

    match = re.match(r"([0-9]{8})[^0-9]([0-9]{6})", base)
    if match is not None:
        return match.group(1) + "_" + match.group(2) + "_filename"

    return datetime.fromtimestamp(path.stat().st_mtime).strftime(f"{FORMAT}_mtime")


def maybe_rename(path):
    path = Path(path)
    if not path.exists():
        print("ERROR:", path, "does not exist", file=sys.stderr)
        return

    dir = path.parent
    base = path.stem
    ext = path.suffix

    for p in path.parts:
        if p.match(r"^\.+$"):
            continue
        if len(p) == 0:
            continue
        if p[0] in (
            ".",
            "-",
            "_",
        ):
            return
    if re.match(r"([0-9]{8})[^0-9]([0-9]{6})", base):
        return

    dest = dir / get_date(path) + "__" + base + ext
    return dest


if __name__ == "__main__":
    for path in sys.argv[1:]:
        path = Path(path)
        if (dest := maybe_rename(path)) is not None:
            path.rename(dest)
